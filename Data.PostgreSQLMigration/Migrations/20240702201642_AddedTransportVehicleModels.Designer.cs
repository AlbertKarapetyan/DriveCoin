// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.PostgreSQLMigration.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240702201642_AddedTransportVehicleModels")]
    partial class AddedTransportVehicleModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.City", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("AvailableLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("available_level");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint")
                        .HasColumnName("map_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MapId" }, "ix_cities_map_id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Data.Entities.Map", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("AvailableLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("available_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("maps");
                });

            modelBuilder.Entity("Data.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("ACityId")
                        .HasColumnType("smallint")
                        .HasColumnName("a_city_id");

                    b.Property<short>("BCityId")
                        .HasColumnType("smallint")
                        .HasColumnName("b_city_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<short>("TimeDelay")
                        .HasColumnType("smallint")
                        .HasColumnName("time_delay");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ACityId" }, "ix_routes_a_city_id");

                    b.HasIndex(new[] { "BCityId" }, "ix_routes_b_city_id");

                    b.ToTable("routes");
                });

            modelBuilder.Entity("Data.Entities.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AvailableLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("available_level");

                    b.Property<short>("EngineSize")
                        .HasColumnType("smallint")
                        .HasColumnName("engine_size");

                    b.Property<short?>("ModelId")
                        .HasColumnType("smallint")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<short>("PassengersCount")
                        .HasColumnType("smallint")
                        .HasColumnName("passengers_count");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("transports");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint")
                        .HasColumnName("external_id");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<DateTime?>("LastSignedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_signed_date");

                    b.Property<short>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("level");

                    b.Property<int?>("RefId")
                        .HasColumnType("integer")
                        .HasColumnName("ref_id");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExternalId" }, "ix_user_external_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Data.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("BoostLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("boost_level");

                    b.Property<short?>("CityId")
                        .HasColumnType("smallint")
                        .HasColumnName("city_id");

                    b.Property<short>("EngineSize")
                        .HasColumnType("smallint")
                        .HasColumnName("engine_size");

                    b.Property<short>("PassengersCount")
                        .HasColumnType("smallint")
                        .HasColumnName("passengers_count");

                    b.Property<int?>("RouteId")
                        .HasColumnType("integer")
                        .HasColumnName("route_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "ix_vehicles_city_id");

                    b.HasIndex(new[] { "RouteId" }, "ix_vehicles_route_id");

                    b.HasIndex(new[] { "TransportId" }, "ix_vehicles_transport_id");

                    b.HasIndex(new[] { "UserId" }, "ix_vehicles_user_id");

                    b.ToTable("vehicles");
                });

            modelBuilder.Entity("Data.Entities.City", b =>
                {
                    b.HasOne("Data.Entities.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Data.Entities.Route", b =>
                {
                    b.HasOne("Data.Entities.City", "ACity")
                        .WithMany()
                        .HasForeignKey("ACityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.City", "BCity")
                        .WithMany()
                        .HasForeignKey("BCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ACity");

                    b.Navigation("BCity");
                });

            modelBuilder.Entity("Data.Entities.Vehicle", b =>
                {
                    b.HasOne("Data.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Data.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.HasOne("Data.Entities.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Route");

                    b.Navigation("Transport");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
